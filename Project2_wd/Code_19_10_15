#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct  8 14:35:59 2019

@author: Ary
"""

import pandas as pd
import os
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score

#discard lines with more than n zeros in column range
def delete_zeros(X, n, from_column, to_column):
    if to_column<=from_column:
        print("to_column<=from_column!!")
        return 0
    if to_column>X.shape[1]:
        print("to_column>X_columns!!")
        return 0
    list_1=[]
    for row in range(X.shape[0]):
        n_zeros=0
        for column in range(from_column,to_column+1):
            if X[row,column] == 0:
                n_zeros+=1
        if n_zeros > n:
            list_1.append(row)
    X__ = np.delete(X,list_1,axis=0)  
    return X__

#set a random seed
np.random.seed(0)

#read data and create a dataframe
cwd = os.getcwd()
filename = cwd + '/default of credit card clients.xls'
nanDict = {}
df = pd.read_excel(filename, header=1, skiprows=0, index_col=0, na_values=nanDict)

df.rename(index=str, columns={"default payment next month": "defaultPaymentNextMonth"}, inplace=True)

# Features and targets 
X = df.loc[:, df.columns != 'defaultPaymentNextMonth'].values
y = df.loc[:, df.columns == 'defaultPaymentNextMonth'].values
y = np.ravel(y)


list_1=[]
for j in range(X.shape[0]):
    if X[j,1] != 1 and X[j,1] != 2:
        list_1.append(j)
        #X=np.delete(X,(j),axis=0) 
    if X[j,2] != 1 and X[j,2] != 2 and X[j,2] != 3 and X[j,2] != 4:
        list_1.append(j)
        #X=np.delete(X,(j),axis=0)
    if X[j,3] != 1 and X[j,3] != 2 and X[j,3] != 3:
       list_1.append(j)
       # X=np.delete(X,(j),axis=0)
  
X = np.delete(X,list_1,axis=0)     
       
#print(X.shape)

# =============================================================================
# # Features and targets 
# X = df.loc[:, df.columns != 'defaultPaymentNextMonth'].values
# y = df.loc[:, df.columns == 'defaultPaymentNextMonth'].values
# y = np.ravel(y)
# =============================================================================

onehotencoder = OneHotEncoder(categories="auto")

X = ColumnTransformer(
    [("", onehotencoder, [1,2,3]),],
    remainder="passthrough"
).fit_transform(X)

def standardize(X, label):
    """
    standardizes a series with name ``label'' within the pd.DataFrame
    ``df''.
    """
    avg = X[:,label].mean()
    stdv = X[:,label].std()
    X_standardized = (X[:,label] - avg)/ stdv
    return X_standardized

for i in range(9,29):
    X[:,i] = standardize(X,i)

y.shape

#build design matrix
n_columns = X.shape[1] + 1
X_1 = np.zeros((X.shape[0],n_columns))
X_1[:,0] = np.ones((X.shape[0]))
X_1[:,1:] = X
print(pd.DataFrame(X_1))




#gradient descent method to estimate betas
betas = np.random.randn(X_1.shape[1])
gamma = 0.01
epsilon = 1e-2
gradient_norm = 1
p = np.zeros((X_1.shape[0]))
while gradient_norm > epsilon:      
    for i in range(X_1.shape[0]):
        #print((1+np.exp(X_1[i,:].dot(betas))), end='')
        p[i] = (np.exp(betas.dot(X_1[i,:])))/(1+np.exp(betas.dot(X_1[i,:])))
    gradient = -(np.transpose(X_1)).dot(y-p)
    betas = betas - gamma*gradient
    gradient_norm = np.linalg.norm(gradient)
# =============================================================================
# print(betas.shape, X_1.shape)
# print(p.shape)

for i in range(X_1.shape[0]):
    p[i] = (np.exp(betas.dot(X_1[i,:])))/(1+np.exp(betas.dot(X_1[i,:])))

print(p, y)




    

# =============================================================================
# # Categorical variables to one-hot's
# onehotencoder = OneHotEncoder(categories="auto")
# 
# X = ColumnTransformer(
#     [("", onehotencoder, [2]),],
#     remainder="passthrough"
# ).fit_transform(X)
# print(pd.DataFrame(X[:,0:8]))
# y.shape
# 
# # Train-test split
# trainingShare = 0.5 
# seed  = 1
# XTrain, XTest, yTrain, yTest=train_test_split(X, y, train_size=trainingShare, \
#                                               test_size = 1-trainingShare,
#                                              random_state=seed)
# 
# # Input Scaling
# sc = StandardScaler()
# XTrain = sc.fit_transform(XTrain)
# XTest = sc.transform(XTest)
# 
# # One-hot's of the target vector
# Y_train_onehot, Y_test_onehot = onehotencoder.fit_transform(yTrain), onehotencoder.fit_transform(yTest)
# 
# # Remove instances with zeros only for past bill statements or paid amounts
# '''
# df = df.drop(df[(df.BILL_AMT1 == 0) &
#                 (df.BILL_AMT2 == 0) &
#                 (df.BILL_AMT3 == 0) &
#                 (df.BILL_AMT4 == 0) &
#                 (df.BILL_AMT5 == 0) &
#                 (df.BILL_AMT6 == 0) &
#                 (df.PAY_AMT1 == 0) &
#                 (df.PAY_AMT2 == 0) &
#                 (df.PAY_AMT3 == 0) &
#                 (df.PAY_AMT4 == 0) &
#                 (df.PAY_AMT5 == 0) &
#                 (df.PAY_AMT6 == 0)].index)
# '''
# df = df.drop(df[(df.BILL_AMT1 == 0) &
#                 (df.BILL_AMT2 == 0) &
#                 (df.BILL_AMT3 == 0) &
#                 (df.BILL_AMT4 == 0) &
#                 (df.BILL_AMT5 == 0) &
#                 (df.BILL_AMT6 == 0)].index)
# 
# df = df.drop(df[(df.PAY_AMT1 == 0) &
#                 (df.PAY_AMT2 == 0) &
#                 (df.PAY_AMT3 == 0) &
#                 (df.PAY_AMT4 == 0) &
#                 (df.PAY_AMT5 == 0) &
#                 (df.PAY_AMT6 == 0)].index)
# 
# #print(pd.DataFrame(X))
# =============================================================================
