#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 16 19:09:39 2019

@author: Ary
"""

import pandas as pd
import os
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import SGDClassifier
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score
from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns
import time
import shap


#read data and create a dataframe
cwd = os.getcwd()
filename = cwd + '/online_shoppers_intention_3.csv'
nanDict = {}
df = pd.read_csv(filename, sep=',', header=0, na_values=nanDict)

print(df.shape)

print(pd.DataFrame(df))

# =============================================================================
# df = df.replace({'VisitorType': {"Returning_Visitor": 1}})
# df = df.replace({'VisitorType': {"New_Visitor": 2}})
# df = df.replace({'VisitorType': {"Other": 0}})
# 
# df = df.replace({'Month': {"Feb": 2}})
# df = df.replace({'Month': {"Mar": 3}})
# df = df.replace({'Month': {"May": 5}})
# df = df.replace({'Month': {"June": 6}})
# df = df.replace({'Month': {"Jul": 7}})
# df = df.replace({'Month': {"Aug": 8}})
# df = df.replace({'Month': {"Sep": 9}})
# df = df.replace({'Month': {"Oct": 10}})
# df = df.replace({'Month': {"Nov": 11}})
# df = df.replace({'Month': {"Dec": 12}})
# 
# =============================================================================

# exploratory data analysis

plt.figure(figsize=(10,10));
sums = df.Revenue.groupby(df.Month).sum()
plt.title(r'Revenue by month', fontsize=15)
plt.pie(sums, labels=sums.index);
plt.show()

plt.figure(figsize=(6,6));
sums1 = df.Revenue.groupby(df.VisitorType).sum()
plt.title(r'Revenue by visitor type', fontsize=15)
plt.pie(sums1, labels=sums1.index);
plt.show()

sns.countplot(df['Revenue'])
plt.title(r'Revenue rate', fontsize=15)
plt.show()

# =============================================================================
# sns.set(rc={'figure.figsize':(11.7,8.27)})
# sns.scatterplot(x='ProductRelated_Duration',y='BounceRates', data=df, hue='Revenue',palette='prism')
# plt.show()
# 
# sns.scatterplot(x='PageValues',y='BounceRates', data=df, hue='Revenue', palette='prism')
# plt.show()
# 
# sns.set(rc={'figure.figsize':(11.7,8.27)})
# sns.scatterplot(x='Informational_Duration',y='BounceRates', data=df, hue='Revenue',palette='prism')
# plt.show()
# 
# sns.set(rc={'figure.figsize':(11.7,8.27)})
# sns.scatterplot(x='ProductRelated',y='ExitRates', data=df, hue='Revenue',palette='prism')
# plt.show()
# =============================================================================

# data preprocessing


df.isnull().sum() #counts how many null values there are in each column

df.dropna(inplace=True) #drops rows with null values in columns and updates the dataframe automatically

print(df)
df.describe()

# delete rows which contain -1 for duration values
df_m = np.asmatrix(df)
print(df_m.shape)
delete_rows = []
for row in range(df_m.shape[0]):
    #print(df_m[row,0])
    if int(df_m[row,0]) == 0:
        if int(df_m[row,1]) != 0:
            delete_rows.append(row)
            first = True 
    if int(df_m[row,2]) == 0:
        if int(df_m[row,3]) != 0:
            first = True 
            if row in delete_rows:
                first = False
            if first == True:
                delete_rows.append(row)
    if int(df_m[row,4]) == 0:
        if int(df_m[row,5]) != 0:
            first = True 
            if row in delete_rows:
                first = False
            if first == True:
                delete_rows.append(row)
    if int(df_m[row,1]) < 0:
        first = True 
        if row in delete_rows:
            first = False
        if first == True:
            delete_rows.append(row)
    if int(df_m[row,3]) < 0:
        first = True 
        if row in delete_rows:
            first = False
        if first == True:
            delete_rows.append(row)
    if int(df_m[row,5]) == -1:
        first = True 
        if row in delete_rows:
            first = False
        if first == True:
            delete_rows.append(row)
a=df.iloc[delete_rows, :]
list_df=a.index
df = df.drop(list_df)

print(df)

# we now want to create dummy variabiles for categorical variables.
# we remove revenue from the design matrix, because it will then become our response variable
df2 = df.drop(['Revenue'], axis=1)
print(df2.columns)
X = pd.get_dummies(df2,drop_first=True) #drop first drops the first level in order to get k-1 variables starting from k

X.Weekend = X.Weekend.astype(int)
print(pd.DataFrame(X))
#print(X.shape)
#x_1 = np.asmatrix(X)
#print(pd.DataFrame(x_1[10:17]))
X.head()
columnsNamesArr = X.columns.values
print(X.shape)
y = df['Revenue']
print(y.shape)
# =============================================================================
# df_m=np.delete(df_m, delete_rows, axis=0)
# print(df_m.shape)
# print(pd.DataFrame(df_m))
# =============================================================================


y = y.astype(int) #consider y now as a dummy variable
print(y)


from sklearn.preprocessing import StandardScaler
scalar = StandardScaler()
X = scalar.fit_transform(X)
X = pd.DataFrame(X)
X.columns = columnsNamesArr

fig1=plt.figure(figsize=(20,15))
# use the heatmap function from seaborn to plot the correlation matrix
# annot = True to print the values inside the square
ax0=sns.heatmap(data=df2.corr().round(2), annot=True)
bottom, top = ax0.get_ylim()
ax0.set_ylim(bottom + 0.5, top - 0.5)
plt.title(r'Correlation heatmap', fontsize=25)
plt.show()
fig1.savefig('corr_matrix.png')
plt.close()

# if we want to apply pca we need to transform month and visitor type before applying the algorithm since it works with only numerical data 
from sklearn.decomposition import PCA
pca = PCA()
pca.fit(X)
cumsum = np.cumsum(pca.explained_variance_ratio_)
d = np.argmax(cumsum >= 0.95) + 1
print(d)
pca = PCA(n_components=0.95)
X_reduced = pca.fit_transform(X)
print(X_reduced)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

from sklearn.model_selection import train_test_split
X_train_r, X_test_r, y_train_r, y_test_r = train_test_split(X_reduced, y, test_size=0.20, random_state=42)

from sklearn.metrics import confusion_matrix, accuracy_score
import scikitplot as skplt


# Logistic Regression
t0 = time.time()
print("\n Building Logistic Regression")
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
model_lr = lr.fit(X_train,y_train)
y_pred_lr = model_lr.predict(X_test)
print("\n Accuracy of Logistic Regression: ",accuracy_score(y_test,y_pred_lr))
print("\n AUC of Logistec Regression: ",metrics.roc_auc_score(y_test,y_pred_lr)*100)
print (time.time()-t0,"seconds process time")


# confusion matrix
skplt.metrics.plot_confusion_matrix(y_test, y_pred_lr, normalize=True)
plt.ylim([-0.5, 1.5])
plt.show()

# Logistic Regression after PCA
t0 = time.time()
print("\n Building Logistic Regression")
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
model_lr_r = lr.fit(X_train_r,y_train_r)
y_pred_lr_r = model_lr_r.predict(X_test_r)
print("\n Accuracy of Logistic Regression: ",accuracy_score(y_test_r,y_pred_lr_r))
print("\n AUC of Logistec Regression: ",metrics.roc_auc_score(y_test_r,y_pred_lr_r)*100)
print (time.time()-t0,"seconds process time")

# confusion matrix
skplt.metrics.plot_confusion_matrix(y_test_r, y_pred_lr_r, normalize=True)
plt.ylim([-0.5, 1.5])
plt.show()


# Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

t0 = time.time()
print("\n Building Random Forest Model")
# Random Forest
model_rf_classi = RandomForestClassifier()
model_rf = model_rf_classi.fit(X_train,y_train)
y_pred_enrf = model_rf.predict(X_test)
print("\n Done")
print("\n Accuracy of Random Forest: ",accuracy(y_test,y_pred_enrf))
print("\n AUC of Random Forest: ",metrics.roc_auc_score(y_test,y_pred_enrf)*100)
print("Training Accuracy :", model_rf.score(X_train, y_train))
print("Testing Accuracy :", model_rf.score(X_test, y_test))
print (time.time()-t0,"seconds process time")


list_n_trees=[]
list_accur=[]
for n_trees in range(10,1010,100):
    t0 = time.time()
    model = RandomForestClassifier(n_estimators=n_trees, random_state=42)
    model.fit(X_train, y_train)
    
    y_pred_rf = model.predict(X_test)
    
    # evaluating the model
    print("Number of trees:", n_trees)
    print("Training Accuracy :", model.score(X_train, y_train))
    print("Testing Accuracy :", model.score(X_test, y_test))
    print("\n Accuracy of Random Forest: ",accuracy(y_test,y_pred_rf))
    print("\n AUC of Random Forest: ",metrics.roc_auc_score(y_test,y_pred_rf)*100)
    print (time.time()-t0,"seconds process time")
    
    list_n_trees.append(n_trees)
    list_accur.append(model.score(X_test, y_test))

best_acc = max(list_accur)
print(best_acc)
    
fig1=plt.figure(figsize=(12,9))
plt.plot(list_n_trees, list_accur, label='Accuracy')
plt.ylabel(r'Accuracy')
plt.xlabel(r'Number of trees')
plt.title(r'Accuracy vs number of trees')
plt.yscale('log')
plt.legend()
plt.show()

# confusion matrix
skplt.metrics.plot_confusion_matrix(y_test, y_pred_rf, normalize=True)
plt.ylim([-0.5, 1.5])
plt.show()

# Support Vector Machine

# Support Vector Machine
print("\n MODEL BUILDING")

t0= time.time()
print("\n Building Support Vector Machine")
from sklearn.svm import SVC
svc = SVC()
model = svc.fit(X_train,y_train)
y_pred_svc = model.predict(X_test)
print("\n Done")
print("\n Accuracy of SVM: ",accuracy(y_test,y_pred_svc))
print("\n AUC of SVM: ",metrics.roc_auc_score(y_test,y_pred_svc)*100)
print (time.time()-t0,"seconds process time")

for c in (0.001,0.01,0.1,1,10,100):
    svc = SVC(C=c)
    model = svc.fit(X_train,y_train)
    y_pred_svc = model.predict(X_test)
    print("\n C:",c)
    print("\n Accuracy of SVM: ",accuracy(y_test,y_pred_svc))
    print("\n AUC of SVM: ",metrics.roc_auc_score(y_test,y_pred_svc)*100)

for ker in ('linear', 'rbf', 'poly'):
    svc = SVC(kernel=ker)
    model = svc.fit(X_train,y_train)
    y_pred_svc = model.predict(X_test)
    print("\n Kernel:",ker)
    print("\n Accuracy of SVM: ",accuracy(y_test,y_pred_svc))
    print("\n AUC of SVM: ",metrics.roc_auc_score(y_test,y_pred_svc)*100)

for g in (0.01,0.1,1,10):
    svc = SVC(gamma=g)
    model = svc.fit(X_train,y_train)
    y_pred_svc = model.predict(X_test)
    print("\n gamma:",g)
    print("\n Accuracy of SVM: ",accuracy(y_test,y_pred_svc))
    print("\n AUC of SVM: ",metrics.roc_auc_score(y_test,y_pred_svc)*100)
    
list_accur=[]   
for ker in ('linear', 'rbf', 'poly'):
    for c in (0.1,1,10):
        for g in (0.01,0.1):
            svc = SVC(gamma=g,kernel=ker,C=c)
            model = svc.fit(X_train,y_train)
            y_pred_svc = model.predict(X_test)
            print("\n Kernel:",ker)
            print("\n C:",c)
            print("\n gamma:",g)
            print("\n Accuracy of SVM: ",accuracy(y_test,y_pred_svc))
            print("\n AUC of SVM: ",metrics.roc_auc_score(y_test,y_pred_svc)*100)
            list_accur.append((accuracy(y_test,y_pred_svc),metrics.roc_auc_score(y_test,y_pred_svc)*100,ker,c,g))

print(list_accur)


print("\n Building Support Vector Machine")
C = [0.001, 0.1, 1, 10, 100] #C large means being close to a hard classifier

list_c=[]
list_acc_svm = []
from sklearn.svm import SVC
for c in C:
    svc = SVC(C=c)
    model = svc.fit(X_train,y_train)
    y_pred_svc = model.predict(X_test)
    print("\n C value", c)
    print("\n Accuracy of SVM: ",accuracy_score(y_test,y_pred_svc))
    
    list_acc_svm.append(accuracy_score(y_test,y_pred_svc))
    list_c.append(c)
    
print(max(list_acc_svm))

fig2=plt.figure(figsize=(12,9))
plt.plot(list_c, list_acc_svm, label='Accuracy')
plt.ylabel(r'Accuracy')
plt.xlabel(r'C values')
plt.title(r'Accuracy vs c values')
plt.yscale('log')
plt.legend()
plt.show()

# confusion matrix
skplt.metrics.plot_confusion_matrix(y_test, y_pred_svc, normalize=True)
plt.ylim([-0.5, 1.5])
plt.show()

#XGboost

import xgboost as xgb

l_rate =[0.0001, 0.001, 0.01, 0.1, 0.3, 1]
n_trees = [10, 50, 100, 200, 500, 1000]
l_acc=[]
for rate in l_rate:
    for tree in n_trees:
        np.random.seed(42)          
        xg_clf = xgb.XGBClassifier(eta=rate, n_estimators=tree, random_state=42)
        xg_clf.fit(X_train, y_train)
            
        y_pred_xg = xg_clf.predict(X_test)
            
        print("learning rate:", rate)
        print("number of trees:", tree)
        print("Test set accuracy with Random Forests and scaled data:", xg_clf.score(X_test,y_test))
        l_acc.append(xg_clf.score(X_test,y_test))

print(max(l_acc))

# study xgboost and consider the possibility for early stopping due to overfitting

xg_clf = xgb.XGBClassifier(n_estimators=500, random_state=42)
eval_set = [(X_train, y_train), (X_test, y_test)]
xg_clf.fit(X_train, y_train, eval_metric=["error", "logloss"], eval_set=eval_set, verbose=True)

print(X_test)
y_pred_xg = xg_clf.predict(X_test)
predictions = [round(value) for value in y_pred_xg]

print("Test set accuracy with Random Forests and scaled data:", xg_clf.score(X_test,y_test))

results = xg_clf.evals_result()
epochs = len(results['validation_0']['error'])
x_axis = range(0, epochs)

from matplotlib import pyplot
# plot log loss
fig, ax = pyplot.subplots()
ax.plot(x_axis, results['validation_0']['logloss'], label='Train')
ax.plot(x_axis, results['validation_1']['logloss'], label='Test')
ax.legend()
pyplot.ylabel('Log Loss')
pyplot.title('XGBoost Log Loss')
pyplot.show()
# plot classification error
fig, ax = pyplot.subplots()
ax.plot(x_axis, results['validation_0']['error'], label='Train')
ax.plot(x_axis, results['validation_1']['error'], label='Test')
ax.legend()
pyplot.ylabel('Classification Error')
pyplot.title('XGBoost Classification Error')
pyplot.show()
# since overfitting tendencies are not totally clear (at least before number of epochs=60, it's not necessary)

# we can try to fit the model allowing for early stopping when the loss over a range of 10 epochs starts increasing too much

# fit model no training data
xg1_clf = xgb.XGBClassifier(n_estimators=500, random_state=42)
eval_set = [(X_test, y_test)]
xg1_clf.fit(X_train, y_train, early_stopping_rounds=10, eval_metric="logloss", eval_set=eval_set, verbose=True)
# make predictions for test data
y_pred = xg1_clf.predict(X_test)
predictions = [round(value) for value in y_pred]
# evaluate predictions
accuracy = accuracy_score(y_test, predictions)

#best iteration is 92, early stopping because overfitting is observed after 90-100 epochs (best seen if we increase the number of estimators(=epochs) to 500)

#having 92 estimators we get the best result in terms of loss function
xg_clf = xgb.XGBClassifier(n_estimators=92, random_state=42)
xg_clf.fit(X_train, y_train)

y_pred_xg = xg_clf.predict(X_test)
predictions = [round(value) for value in y_pred_xg]

print("Test set accuracy with Random Forests and scaled data:", xg_clf.score(X_test,y_test))

#no clear tendency of overfitting is observed
# =============================================================================
# xg_clf = xgb.XGBClassifier(learning_rate=0.00001, n_estimators=1, random_state=42)
# xg_clf.fit(X_train,y_train)
# 
# y_pred_xg = xg_clf.predict(X_test)
# xg_clf.score(X_test,y_pred_xg)
# 
# print("Test set accuracy with Random Forests and scaled data: {:.4f}".format(xg_clf.score(X_test,y_pred_xg)))
# 
# =============================================================================
# confusion matrix
skplt.metrics.plot_confusion_matrix(y_test, y_pred_xg, normalize=True)
plt.ylim([-0.5, 1.5])
plt.show()

#Need to rerun all the methods with the best selected parameters before the plot

svc = SVC(gamma=0.1,kernel='rbf',C=10)
model = svc.fit(X_train,y_train)
y_pred_svc = model.predict(X_test)

fpr_svc, tpr_svc, threshold = metrics.roc_curve(y_test,y_pred_svc)
roc_auc_svc = metrics.auc(fpr_svc, tpr_svc)

fpr_lr, tpr_lr, threshold = metrics.roc_curve(y_test,y_pred_lr)
roc_auc_lr = metrics.auc(fpr_lr, tpr_lr)

#random forest with 100 trees
model_rf_classi = RandomForestClassifier(n_estimators=100)
model_rf = model_rf_classi.fit(X_train,y_train)
y_pred_enrf = model_rf.predict(X_test)

#shap index for random forest
explainer = shap.TreeExplainer(model_rf)
shap_values = explainer.shap_values(X_test)

shap.summary_plot(shap_values[1], X_test, plot_type = 'bar')
shap.summary_plot(shap_values[1], X_test)

fpr_enrf, tpr_enrf, threshold = metrics.roc_curve(y_test,y_pred_enrf)
roc_auc_enrf = metrics.auc(fpr_enrf, tpr_enrf)

fpr_xg, tpr_xg, threshold = metrics.roc_curve(y_test,y_pred_xg)
roc_auc_xg = metrics.auc(fpr_xg, tpr_xg)

import matplotlib.pyplot as plt
plt.title('Receiver Operating Characteristic')
plt.plot(fpr_svc, tpr_svc, 'b', label = 'AUC = %0.2f SVC' % roc_auc_svc,color="g")
plt.plot(fpr_lr, tpr_lr, 'b', label = 'AUC = %0.2f LR' % roc_auc_lr)
plt.plot(fpr_xg, tpr_xg, 'b', label = 'AUC = %0.2f XG' % roc_auc_xg,color="y")
plt.plot(fpr_enrf, tpr_enrf, 'b', label = 'AUC = %0.2f RF' % roc_auc_enrf,color="r")
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
